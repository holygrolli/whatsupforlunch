name: lecasino
on:
  workflow_dispatch:
    inputs:
      force_process:
        description: execute process job
        type: boolean
        default: true
      force_publish:
        description: execute publish job
        type: boolean
        default: true
  schedule:
    - cron: '45 7 * * 1'
permissions: 
  contents: write
  packages: write
jobs:
  download:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/holygrolli/whatsupforlunch:main
    outputs:
      matrix: ${{ steps.setmatrix.outputs.matrix }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: >-
            ${{
              github.event_name == 'schedule' && 'main' || ''
            }}
      - name: get new links
        shell: bash
        run: |
          WD=${PWD}
          mkdir -p tmp
          scrapy runspider locations/lecasino/scra.py --nolog | grep -iv anger | grep -iv heiter | grep -iv lindenau | sort > tmp/scraped_links.txt
          cd tmp
          echo "found these changed links: $(comm -13 ../data/lecasino/scraped_done.txt scraped_links.txt)"
          while IFS= read -r line; do
            curl -sOL $line
          done < <(comm -13 ../data/lecasino/scraped_done.txt scraped_links.txt)
      - id: setmatrix
        working-directory: tmp
        run: |
          matrixInput=$(find . -name '*.pdf' -printf '%P\n') # Creates array of all pdf files in tmp folder
          # Start Generate Json String
          echo "$matrixInput" | \
          jq --slurp --raw-input -c 'split("\n")[:-1] | map(select(length>0))' > matrix
          cat ./matrix
          # End Generate Json String
          matrixStringifiedObject=$(cat ./matrix) # Use this as jq @sh not working right
          echo "::set-output name=matrix::$matrixStringifiedObject"
      - name: Archive all pdfs
        uses: actions/upload-artifact@v3
        with:
          name: pdfs
          retention-days: ${{ github.event_name != 'workflow_dispatch' && '30' || '2' }}
          path: |
            tmp
  process:
    needs: download
    if: ${{ needs.download.outputs.matrix != '' && toJson(fromJson(needs.download.outputs.matrix)) != '[]' && (github.event_name != 'workflow_dispatch' || inputs.force_process ) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/holygrolli/whatsupforlunch:main
    strategy:
      max-parallel: 1
      matrix:
        files: ${{fromJson(needs.download.outputs.matrix)}}
        # include:
        #   - files: Le-Casino-Speiseplan-KW26.pdf
    concurrency: singlethread
    steps:
    - name: checkout source code
      uses: actions/checkout@v3
      with:
        ref: >-
          ${{
            github.event_name == 'schedule' && 'main' || ''
          }}
    - name: Download pdf artifacts
      uses: actions/download-artifact@v4.1.7
      with:
        name: pdfs
        path: downloadtmp
    - name: copy step files
      run: |
        mkdir tmp
        cd tmp
        cp ../downloadtmp/${{ matrix.files }} .
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    - name: Configure AWS Profile
      run: |
        ls -al
        mkdir -p ~/.aws
        cat > ~/.aws/config << EOF
        [default]
        region = eu-central-1
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        EOF
        cat ~/.aws/config
    - name: Extract image from pdf ${{ matrix.files }}
      working-directory: tmp
      run: pdftoppm -singlefile -r 150 -png ${{ matrix.files }} image
    - name: process image with chatgpt
      working-directory: tmp
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
      shell: bash
      run: |
        python ../locations/lecasino/process_chatgpt.py
        awk '/^\s*{$/,/^\s*}$/ {print}' chatgpt.json > final.json
        mkdir -p ../data/lecasino
    - name: collect final files
      working-directory: tmp
      shell: bash
      run: |
        mkdir -p ../success-pdfs
        cp ${{ matrix.files }} ../success-pdfs
        cp final.json ../success-pdfs/$(date -d"$(jq -r 'keys[] | select(test("\\d{4}-\\d{2}-\\d{2}"))' final.json | sort | head -n 1)" +%Y-%V).json
    - name: Archive final files
      uses: actions/upload-artifact@v3
      with:
        name: success-pdfs
        retention-days: 5
        path: |
          success-pdfs
    - name: Archive all tmp files
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.files }}-processed
        retention-days: 5
        path: |
          tmp
  publish:
    needs: process
    if: (success() || failure ()) && (github.event_name != 'workflow_dispatch' || inputs.force_publish )
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: >-
            ${{
              github.event_name == 'schedule' && 'main' || ''
            }}
      - name: Download originally downloaded pdf artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: pdfs
          path: downloadtmp
      - name: Download successfully processed pdf artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: success-pdfs
          path: success-pdfs
      - name: process csv with chatgpt
        working-directory: success-pdfs
        shell: bash
        run: |
          for file in $(find . -type f -name "*.pdf" -printf '%P\n');
          do
            cat ../data/lecasino/scraped_done.txt <(echo $'\n'$(cat ../downloadtmp/scraped_links.txt | grep ${file%_separated*})) | sort -u | grep . > scraped_done.txt
            mv scraped_done.txt ../data/lecasino/scraped_done.txt
          done
          cp *.json ../data/lecasino/
      - uses: tibdex/github-app-token@v2
        id: generate-token
        with:
          app_id: ${{ secrets.TOKEN_APP_ID }}
          private_key: ${{ secrets.TOKEN_APP_PRIVATE_KEY }}
      - name: Create Pull Request
        if: ${{ !github.event.act }}
        uses: peter-evans/create-pull-request@v5
        with:
          add-paths: |
            data
          branch: ${{ github.workflow }}-cron
          commit-message: "chore(data): automated scraping"
          labels: "auto-approve-cron"
          title: "${{ github.workflow }} data updates"
          token: ${{ steps.generate-token.outputs.token }}
